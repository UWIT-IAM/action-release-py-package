name: Push Python package to GAR usign Poetry
description: Checks if pyproject.toml version changed and, if so, builds and publishes new package
inputs:
  pypi:
    description: URL of PyPI to push to. This does not end with "simple/"
    type: string
    required: true
  credentials:
    description: JSON credentials file for auth
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        token: ${{ github.token }}
        # get previous commit so we can compare pyproject.toml below
        fetch-depth: 2

    - name: Check pyproject.toml version to see if a new release is necessary
      shell: bash
      run: |
        set -x  # print commands and their arguments as they are executed
        diff=$(git diff HEAD:pyproject.toml HEAD~1:pyproject.toml) || exit 0
        echo "$diff" | grep '+version ='
        if [[ $? -ne 0 ]];
        then
          echo 'version in pyproject.toml did not change - not publishable'
          exit 1
        fi

    - uses: actions/setup-python@v4
      with:
        python-version-file: pyproject.toml

    - name: Install poetry
      shell: bash
      run: |
        pip install poetry
        poetry config virtualenvs.create false

    - name: Install and test package
      shell: bash
      run: |
        poetry install --with=dev  # include dev dependencies
        make ci-test

    - name: Auth to Google Cloud
      # important! this 'auth' is referenced as `steps.auth` on the next job
      id: auth
      # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json-1
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ inputs.credentials }}'
        token_format: 'access_token'

    - name: Auth to Google Artifact Registry
      shell: bash
      # https://github.com/google-github-actions/auth#authenticating-to-container-registry-and-artifact-registry
      # requires role: roles/iam.serviceAccountTokenCreator
      run: |-
        echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev

    - name: Release if new version
      env:
        # quirk: pip wants to use the "simple" interface for `pip index`
        pip_pypi: ${{ inputs.pypi }}simple/
        # poetry cannot upload to the "simple" interface
        poetry_pypi: ${{ inputs.pypi }}
      shell: bash
      run: |
        set -x
        # get package name/version into env vars
        # https://stackoverflow.com/a/11100252/1943429
        read package version < <( poetry version --no-ansi )

        # install keyring so pip can talk to GAR PyPI
        pip install keyrings.google-artifactregistry-auth

        # search PyPI.
        # note: pip index is an "experimental" command and may go away...
        # if so you can try the yolk3k package to list versions
        # https://stackoverflow.com/a/5422144/1943429
        # pip index versions will include a "INSTALLED: " line that will always match our version. Only check available versions..
        text=$(pip index versions "$package" --index-url ${pip_pypi} | grep '^Available versions:' || echo 'Nothing found')

        if echo "$text" | grep "$version" ; then
          echo "::error:: $package version $version detected on PyPI - skipping upload"
          exit 1
        else
          echo "$package version $version not on PyPI yet - building and uploading"
        fi

        # configure poetry to be able to talk to gar and build/push new package
        poetry config repositories.gar ${poetry_pypi}
        poetry publish --build -r gar
